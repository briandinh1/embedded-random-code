
dac.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000154  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000100  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000154  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000184  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  000001c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007f6  00000000  00000000  0000021c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006bc  00000000  00000000  00000a12  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000312  00000000  00000000  000010ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000094  00000000  00000000  000013e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003c6  00000000  00000000  00001474  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000039  00000000  00000000  0000183a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00001873  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 70 00 	call	0xe0	; 0xe0 <main>
  78:	0c 94 7e 00 	jmp	0xfc	; 0xfc <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <UART_Init>:
{
	/* Start transmission */
	SPDR = cData;
	/* Wait for transmission complete */
	while(!(SPSR & (1<<SPIF)));
}
  80:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
  84:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
  88:	88 e1       	ldi	r24, 0x18	; 24
  8a:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
  8e:	08 95       	ret

00000090 <init_ADC>:
  90:	87 b1       	in	r24, 0x07	; 7
  92:	17 b8       	out	0x07, r1	; 7
  94:	81 e2       	ldi	r24, 0x21	; 33
  96:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
  9a:	87 e8       	ldi	r24, 0x87	; 135
  9c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
  a0:	08 95       	ret

000000a2 <GetADCResult>:
  a2:	ea e7       	ldi	r30, 0x7A	; 122
  a4:	f0 e0       	ldi	r31, 0x00	; 0
  a6:	80 81       	ld	r24, Z
  a8:	80 64       	ori	r24, 0x40	; 64
  aa:	80 83       	st	Z, r24
  ac:	80 81       	ld	r24, Z
  ae:	86 fd       	sbrc	r24, 6
  b0:	fd cf       	rjmp	.-6      	; 0xac <GetADCResult+0xa>
  b2:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
  b6:	08 95       	ret

000000b8 <SPI_MasterInit>:
  b8:	84 b1       	in	r24, 0x04	; 4
  ba:	88 62       	ori	r24, 0x28	; 40
  bc:	84 b9       	out	0x04, r24	; 4
  be:	8c b5       	in	r24, 0x2c	; 44
  c0:	81 65       	ori	r24, 0x51	; 81
  c2:	8c bd       	out	0x2c, r24	; 44
  c4:	08 95       	ret

000000c6 <spi_send>:


void spi_send(uint16_t data)
{
	uint8_t config = 0b00111111;
	uint8_t upper_byte = (config & 0xF0)|(0x0F & (data>>8));
  c6:	9f 70       	andi	r25, 0x0F	; 15
  c8:	90 63       	ori	r25, 0x30	; 48
	uint8_t lower_byte = (data & 0xFF);

	DDRB &= ~(1<<PORTB2);
  ca:	22 98       	cbi	0x04, 2	; 4
	SPDR = upper_byte;
  cc:	9e bd       	out	0x2e, r25	; 46
	while(!(SPSR & (1<<SPIF)));
  ce:	0d b4       	in	r0, 0x2d	; 45
  d0:	07 fe       	sbrs	r0, 7
  d2:	fd cf       	rjmp	.-6      	; 0xce <spi_send+0x8>
	SPDR = lower_byte;
  d4:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));
  d6:	0d b4       	in	r0, 0x2d	; 45
  d8:	07 fe       	sbrs	r0, 7
  da:	fd cf       	rjmp	.-6      	; 0xd6 <spi_send+0x10>
	DDRB |= (1<<PORTB2);
  dc:	22 9a       	sbi	0x04, 2	; 4
  de:	08 95       	ret

000000e0 <main>:
}

int main(void)
{
	init_ADC();
  e0:	0e 94 48 00 	call	0x90	; 0x90 <init_ADC>
	SPI_MasterInit();
  e4:	0e 94 5c 00 	call	0xb8	; 0xb8 <SPI_MasterInit>
	UART_Init(MYUBRR);
  e8:	87 e6       	ldi	r24, 0x67	; 103
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	0e 94 40 00 	call	0x80	; 0x80 <UART_Init>
	
    while (1) 
    {
		unsigned char c = GetADCResult();
  f0:	0e 94 51 00 	call	0xa2	; 0xa2 <GetADCResult>
		spi_send(c);
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	0e 94 63 00 	call	0xc6	; 0xc6 <spi_send>
  fa:	fa cf       	rjmp	.-12     	; 0xf0 <main+0x10>

000000fc <_exit>:
  fc:	f8 94       	cli

000000fe <__stop_program>:
  fe:	ff cf       	rjmp	.-2      	; 0xfe <__stop_program>
