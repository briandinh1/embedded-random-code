
adc_pwm.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000126  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000d2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000126  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000158  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  00000198  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006de  00000000  00000000  000001d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000635  00000000  00000000  000008ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000025a  00000000  00000000  00000ee3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  00001140  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000360  00000000  00000000  00001194  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000028  00000000  00000000  000014f4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 5f 00 	call	0xbe	; 0xbe <main>
  78:	0c 94 67 00 	jmp	0xce	; 0xce <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <InitTimer0>:
#include <avr/interrupt.h>


void InitTimer0(void)
{
	DDRD |= 1<<DDD6;
  80:	56 9a       	sbi	0x0a, 6	; 10
	
	// UNCOMMENT FOR TONE GENERATION
	TCCR0A |= (1 << COM0A0);
  82:	84 b5       	in	r24, 0x24	; 36
  84:	80 64       	ori	r24, 0x40	; 64
  86:	84 bd       	out	0x24, r24	; 36
	TCCR0A |= (1 << WGM01);
  88:	84 b5       	in	r24, 0x24	; 36
  8a:	82 60       	ori	r24, 0x02	; 2
  8c:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1 << CS01) | (1 << CS00);
  8e:	85 b5       	in	r24, 0x25	; 37
  90:	83 60       	ori	r24, 0x03	; 3
  92:	85 bd       	out	0x25, r24	; 37
  94:	08 95       	ret

00000096 <init_ADC>:
	//TCCR0B |= (1 << CS01) | (1 << CS00);
}

void init_ADC(void)
{
	DDRC &= 0x00;
  96:	87 b1       	in	r24, 0x07	; 7
  98:	17 b8       	out	0x07, r1	; 7
	// ADLAR set to 1 ? left adjusted result in ADCH
	// MUX3:0 set to 0001 ? input voltage at ADC1
	ADMUX = (1<<MUX0) | (1<<ADLAR);
  9a:	81 e2       	ldi	r24, 0x21	; 33
  9c:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	// ADEN set to 1 ? enables the ADC circuitry
	// ADPS2:0 set to 111 ? prescalar set to 128 (104us per conversion)
	ADCSRA = (1<<ADEN) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
  a0:	87 e8       	ldi	r24, 0x87	; 135
  a2:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
  a6:	08 95       	ret

000000a8 <GetADCResult>:
}

unsigned char GetADCResult(void)
{
	// Start A to D conversion
	ADCSRA |= (1<<ADSC);
  a8:	ea e7       	ldi	r30, 0x7A	; 122
  aa:	f0 e0       	ldi	r31, 0x00	; 0
  ac:	80 81       	ld	r24, Z
  ae:	80 64       	ori	r24, 0x40	; 64
  b0:	80 83       	st	Z, r24
	// Wait for conversion to complete
	while (ADCSRA & 1<<ADSC);
  b2:	80 81       	ld	r24, Z
  b4:	86 fd       	sbrc	r24, 6
  b6:	fd cf       	rjmp	.-6      	; 0xb2 <GetADCResult+0xa>
	return (ADCH);
  b8:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
}
  bc:	08 95       	ret

000000be <main>:

int main(void)
{
	InitTimer0();
  be:	0e 94 40 00 	call	0x80	; 0x80 <InitTimer0>
	init_ADC();
  c2:	0e 94 4b 00 	call	0x96	; 0x96 <init_ADC>
	
	while(1)
	{
		OCR0A = GetADCResult();
  c6:	0e 94 54 00 	call	0xa8	; 0xa8 <GetADCResult>
  ca:	87 bd       	out	0x27, r24	; 39
  cc:	fc cf       	rjmp	.-8      	; 0xc6 <main+0x8>

000000ce <_exit>:
  ce:	f8 94       	cli

000000d0 <__stop_program>:
  d0:	ff cf       	rjmp	.-2      	; 0xd0 <__stop_program>
